name: Run Test Acceptance Test
env:
  TEST_ENV: BETA # If changed update run_tests job name
  CI: true
  SYS_ADMIN_USERNAME: ${{ secrets.SYS_ADMIN_USERNAME }}
  SYS_ADMIN_PASSWORD: ${{ secrets.SYS_ADMIN_PASSWORD }}
  SYS_ADMIN_FIRST_NAME: ${{ secrets.SYS_ADMIN_FIRST_NAME }}
  SYS_ADMIN_LAST_NAME: ${{ secrets.SYS_ADMIN_LAST_NAME }}
  SYS_ADMIN_EMAIL: ${{ secrets.SYS_ADMIN_EMAIL }}
  ALPHA_INSTANCE_URL: ${{ secrets.ALPHA_INSTANCE_URL }}
  BETA_INSTANCE_URL: ${{ secrets.BETA_INSTANCE_URL }}
  QA_INSTANCE_URL: ${{ secrets.QA_INSTANCE_URL }}
  IST_INSTANCE_URL: ${{ secrets.IST_INSTANCE_URL }}
  VPRIOR_INSTANCE_URL: ${{ secrets.VPRIOR_INSTANCE_URL }}
  VNEXT_INSTANCE_URL: ${{ secrets.VNEXT_INSTANCE_URL }}
  PROD_INSTANCE_URL: ${{ secrets.PROD_INSTANCE_URL }}
on:
  pull_request:
    branches:
      - master
    paths-ignore:
      - .vscode/**
      - .github/**
      - '**/README.md'
      - '**/example.env'
      - '**/.gitignore'
      - '**/.env.vault'
jobs:
  check_for_test_file_changes:
    name: Check for test file changes
    runs-on: ubuntu-latest
    outputs:
      changed_test_files: ${{ steps.get_changed_test_files.outputs.changed_test_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - name: Get changed test files
        id: get_changed_test_files
        shell: bash {0}
        run: |
          echo "Changed files in this PR:"
          BASE_HEAD_SHA=${{ github.event.pull_request.base.sha }}
          PR_HEAD_SHA=${{ github.event.pull_request.head.sha }}
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '\.spec\.ts' | tr '\n' ' ')
          if [ -n "$CHANGED_FILES" ]
          then
            echo "Test files changed:"
            echo "$CHANGED_FILES"
            echo "changed_test_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          else
            echo "No test files changed."
          fi
  generate_shards:
    name: 'Generate Shards'
    needs: check_for_test_file_changes
    runs-on: ubuntu-latest
    outputs:
      shards: ${{ steps.generate_shards.outputs.shards }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install jq
      - name: Generate shards
        id: generate_shards
        run: |
          #!/bin/bash
          test_directory="tests"

          test_count=0

          while IFS= read -r file; do
            count=$(grep -c "test(" "$file")
            test_count=$((test_count + count))
          done < <(for filePath in ${{ needs.check_for_test_file_changes.outputs.changed_test_files }}; do basename "$filePath"; done | xargs -I {} find "tests" -type f -name {})

          test_count=$((test_count * 3)) # repeat-each 3
          min_shards=10
          max_tests_per_shard=20

          num_of_shards=$((test_count / max_tests_per_shard))

          if [ "$num_of_shards" -le "$min_shards" ]; then
            num_of_shards=$min_shards
          fi

          shards_array=()

          for ((i=1; i<=$num_of_shards; i++)); do
            shards_array+=("$i/$num_of_shards")
          done

          json_shards_array=$(jq -n -c --arg arr "$(printf '%s\n' "${shards_array[@]}")" '$arr | split("\n")')

          # Output the result and the array
          echo "Total tests: $test_count"
          echo "Total shards: $num_of_shards"
          echo "shards=${shards_array[@]}"
          echo "shards=$json_shards_array" >> $GITHUB_OUTPUT
  run_tests:
    name: 'Playwright Tests - BETA - ${{ matrix.project }} - Shard ${{ matrix.shard }}'
    needs: [check_for_test_file_changes, generate_shards]
    if: ${{ needs.check_for_test_file_changes.outputs.changed_test_files != '' }}
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.39.0-jammy
    strategy:
      fail-fast: false
      matrix:
        project: [chrome, edge]
        shard: ${{ fromJson(needs.generate_shards.outputs.shards) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest
      - name: Install dependencies
        run: npm ci
      - name: Run your tests
        run: |
          echo "Running tests for ${{ matrix.project }} shard ${{ matrix.shard }}"
          npx playwright test ${{ needs.check_for_test_file_changes.outputs.changed_test_files }} --project=${{ matrix.project }} --shard=${{ matrix.shard }} --repeat-each 3 --retries 0
      - name: Rename blob-reports
        if: always()
        run: for file in blob-report/*; do [ -f "$file" ] && mv "$file" "blob-report/${{ matrix.project }}-$(basename "$file")"; done
      - name: Upload blob report'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: all-blob-reports
          path: blob-report
          retention-days: 1
  merge_reports_and_publish:
    name: 'Merge Reports and Publish'
    needs: run_tests
    if: always()
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    outputs:
      deployment_url: ${{ steps.deploy-to-vercel.outputs.deployment_url }}
    steps:
      - name: Checkout repository
        if: ${{ needs.run_tests.result != 'skipped' }}
        uses: actions/checkout@v3
      - name: Setup Node.js
        if: ${{ needs.run_tests.result != 'skipped' }}
        uses: actions/setup-node@v3
        with:
          node-version: latest
      - name: Install dependencies
        if: ${{ needs.run_tests.result != 'skipped' }}
        run: npm ci
      - name: Download blob reports
        if: ${{ needs.run_tests.result != 'skipped' }}
        uses: actions/download-artifact@v3
        with:
          name: all-blob-reports
          path: all-blob-reports
      - name: Rename reports
        if: ${{ needs.run_tests.result != 'skipped' }}
        run: count=1; for file in $(find ./all-blob-reports -maxdepth 1 -type f -name "*.zip"); do mv "$file" "all-blob-reports/report-$count.zip"; count=$((count+1)); done
      - name: Merge into HTML Report
        if: ${{ needs.run_tests.result != 'skipped' }}
        run: npx playwright merge-reports --reporter html ./all-blob-reports
      - name: Upload HTML report
        if: ${{ needs.run_tests.result != 'skipped' }}
        uses: actions/upload-artifact@v3
        with:
          name: html-report-attempt-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 90
      - name: Install vercel cli
        if: ${{ needs.run_tests.result != 'skipped' }}
        run: npm i -g vercel@latest
      - name: Pull vercel environment information
        if: ${{ needs.run_tests.result != 'skipped' }}
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy to vercel
        if: ${{ needs.run_tests.result != 'skipped' }}
        id: deploy-to-vercel
        run: |
          vercel --yes --token ${{ secrets.VERCEL_TOKEN }} > deployment_url.txt
          echo "deployment_url=$(cat deployment_url.txt)" >> $GITHUB_OUTPUT
  add_pr_comment:
    name: 'Add PR Comment'
    needs: merge_reports_and_publish
    if: always()
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Comment URL to PR
        env:
          DEPLOYMENT_URL: ${{ needs.merge_reports_and_publish.outputs.deployment_url }}
        uses: actions/github-script@v6
        id: commment_script
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Playwright Report: ${process.env.DEPLOYMENT_URL}`
            })
