name: Playwright_Tests
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Environment to run tests against'
        options:
          - ALPHA
          - BETA
          - QA
          - IST
          - VPRIOR
          - VNEXT
          - PROD
          - FEDSPRING_IST
        required: true
        default: ALPHA
      record_har:
        type: boolean
        description: 'Record HAR files'
        required: false
        default: false
env:
  CI: true
  SYS_ADMIN_USERNAME: ${{ secrets.SYS_ADMIN_USERNAME }}
  SYS_ADMIN_PASSWORD: ${{ secrets.SYS_ADMIN_PASSWORD }}
  SYS_ADMIN_FIRST_NAME: ${{ secrets.SYS_ADMIN_FIRST_NAME }}
  SYS_ADMIN_LAST_NAME: ${{ secrets.SYS_ADMIN_LAST_NAME }}
  SYS_ADMIN_EMAIL: ${{ secrets.SYS_ADMIN_EMAIL }}
  SYS_ADMIN_EMAIL_PASSWORD: ${{ secrets.SYS_ADMIN_EMAIL_PASSWORD }}
  SYS_ADMIN_EMAIL_HOST: ${{ secrets.SYS_ADMIN_EMAIL_HOST }}
  SYS_ADMIN_EMAIL_PORT: ${{ secrets.SYS_ADMIN_EMAIL_PORT }}
  TEST_ENV: ${{ github.event.inputs.environment }}
  RECORD_HAR: ${{ github.event.inputs.record_har }}
  ALPHA_INSTANCE_URL: ${{ secrets.ALPHA_INSTANCE_URL }}
  BETA_INSTANCE_URL: ${{ secrets.BETA_INSTANCE_URL }}
  QA_INSTANCE_URL: ${{ secrets.QA_INSTANCE_URL }}
  IST_INSTANCE_URL: ${{ secrets.IST_INSTANCE_URL }}
  VPRIOR_INSTANCE_URL: ${{ secrets.VPRIOR_INSTANCE_URL }}
  VNEXT_INSTANCE_URL: ${{ secrets.VNEXT_INSTANCE_URL }}
  PROD_INSTANCE_URL: ${{ secrets.PROD_INSTANCE_URL }}
  FEDSPRING_IST_INSTANCE_URL: ${{ secrets.FEDSPRING_IST_INSTANCE_URL }}
  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
  RENDER_REPORT_SITE_SERVICE_ID: ${{ secrets.RENDER_REPORT_SITE_SERVICE_ID }}
jobs:
  generate_shards:
    name: 'Generate Shards'
    runs-on: ubuntu-latest
    outputs:
      shards: ${{ steps.generate_shards.outputs.shards }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install jq
      - name: Generate shards
        id: generate_shards
        run: |
          #!/bin/bash
          test_directory="tests"

          test_count=0

          while IFS= read -r file; do
            count=$(grep -c "test(" "$file")
            test_count=$((test_count + count))
          done < <(find "$test_directory" -type f -name '*.spec.ts')

          min_shards=10
          max_tests_per_shard=20

          num_of_shards=$((test_count / max_tests_per_shard))

          if [ "$num_of_shards" -le "$min_shards" ]; then
            num_of_shards=$min_shards
          fi

          shards_array=()

          for ((i=1; i<=$num_of_shards; i++)); do
            shards_array+=("$i/$num_of_shards")
          done

          json_shards_array=$(jq -n -c --arg arr "$(printf '%s\n' "${shards_array[@]}")" '$arr | split("\n")')

          # Output the result and the array
          echo "Total tests: $test_count"
          echo "Total shards: $num_of_shards"
          echo "shards=${shards_array[@]}"
          echo "shards=$json_shards_array" >> $GITHUB_OUTPUT
  run_tests:
    name: 'Playwright Tests - ${{ github.event.inputs.environment }} - ${{ matrix.project }} - Shard ${{ matrix.shard }}'
    needs: generate_shards
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.43.0-jammy
    strategy:
      fail-fast: false
      matrix:
        project: [chrome, edge]
        shard: ${{ fromJson(needs.generate_shards.outputs.shards) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
      - name: Install dependencies
        run: npm ci
      - name: Run your tests
        run: npx playwright test --project=${{ matrix.project }} --shard=${{ matrix.shard }}
      - name: Rename blob-reports
        if: ${{ cancelled() != true }}
        run: for file in blob-report/*; do [ -f "$file" ] && mv "$file" "blob-report/${{ matrix.project }}-$(basename "$file")"; done
      - name: Upload blob report
        if: ${{ cancelled() != true }}
        uses: actions/upload-artifact@v4
        with:
          name: all-blob-reports-${{ matrix.project }}-${{ strategy.job-index }}
          path: blob-report
          retention-days: 1
      - name: Upload test results
        if: ${{ cancelled() != true && github.event.inputs.record_har == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.project }}-${{ strategy.job-index }}
          path: test-results
          retention-days: 1
  merge_reports_and_publish:
    name: 'Merge Reports and Publish'
    if: ${{ cancelled() != true }}
    needs: [run_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
      - name: Install dependencies
        run: npm ci
      - name: Download blob reports
        uses: actions/download-artifact@v4
        with:
          pattern: all-blob-reports-*
          merge-multiple: true
          path: all-blob-reports
      - name: Rename reports
        run: count=1; for file in $(find ./all-blob-reports -maxdepth 1 -type f -name "*.zip"); do mv "$file" "all-blob-reports/report-$count.zip"; count=$((count+1)); done
      - name: Merge into HTML Report
        run: npx playwright merge-reports --reporter html ./all-blob-reports
      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report-attempt-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 14
      - name: Get date and time
        id: date
        run: echo "value=$(($(date '+%s%N' | cut -b1-13) / 1))" >> $GITHUB_OUTPUT
      - name: Create report directory name
        id: report_directory_name
        run: echo "value=${{ steps.date.outputs.value }}-${{ env.TEST_ENV }}-${{ needs.run_tests.result }}-${{ github.workflow }}-${{ github.run_number }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT
      - name: Rename reports
        run: mv playwright-report ${{ steps.report_directory_name.outputs.value }}
      - name: Commit report to report site
        uses: cpina/github-action-push-to-another-repository@v1.7.2
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: ${{ steps.report_directory_name.outputs.value }}
          destination-github-username: 'StevanFreeborn'
          user-email: '65925598+StevanFreeborn@users.noreply.github.com'
          destination-repository-name: 'onspring-qa-playwright-reports'
          target-branch: 'main'
          commit-message: 'chore: add new report [skip deploy]'
          target-directory: 'reports/${{ steps.report_directory_name.outputs.value }}/'
      - name: Deploy report site
        run: node ./scripts/deployReportSite.mjs
      - name: Display report URL
        run: |
          echo "Report available at URL: https://onspringqareports.stevanfreeborn.com/reports/${{ steps.report_directory_name.outputs.value }}/"
  cleanup:
    name: 'Cleanup test artifacts'
    if: always()
    needs: [generate_shards, run_tests]
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.43.0-jammy
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
      - name: Install dependencies
        run: npm ci
      - name: Run your tests
        run: npm run cleanup
